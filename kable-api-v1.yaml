openapi: 3.0.0
paths:
  /api/v1/bundles:
    get:
      operationId: getBundles
      summary: get all bundles
      description: Retrieve all bundles.
      parameters:
        - &ref_0
          name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - &ref_1
          name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information about all bundles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BundleResponseDto'
        '401': &ref_2
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500': &ref_3
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags: &ref_4
        - bundles
  /api/v1/bundles/{bundleId}:
    get:
      operationId: getBundle
      summary: get bundle
      description: Retrieve a bundle.
      parameters:
        - *ref_0
        - *ref_1
        - name: bundleId
          required: true
          in: path
          description: The bundle ID
          example: bun_a23e148584d0463482c961b7f62f824c
          schema:
            type: string
      responses:
        '200':
          description: Information about your bundle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleResponseDto'
        '401': *ref_2
        '500': *ref_3
      tags: *ref_4
  /api/v1/bundles/create:
    post:
      operationId: createBundle
      summary: create bundle
      description: Create a bundle.
      parameters:
        - *ref_0
        - *ref_1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBundleRequestDto'
      responses:
        '200':
          description: Bundle successfully created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BundleResponseDto'
        '401': *ref_2
        '500': *ref_3
      tags: *ref_4
  /api/v1/bundles/{bundleId}/update:
    post:
      operationId: updateBundle
      summary: update bundle
      description: Update a bundle.
      parameters:
        - *ref_0
        - *ref_1
        - name: bundleId
          required: true
          in: path
          description: The bundle ID
          example: bun_a23e148584d0463482c961b7f62f824c
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBundleRequestDto'
      responses:
        '201':
          description: Bundle successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundleResponseDto'
        '401': *ref_2
        '500': *ref_3
      tags: *ref_4
  /api/v1/bundles/{bundleId}/delete:
    post:
      operationId: deleteBundle
      summary: delete bundle
      description: |-
        Delete a bundle.

        You cannot delete a bundle to which a customer is actively subscribed.
      parameters:
        - *ref_0
        - *ref_1
        - name: bundleId
          required: true
          in: path
          description: The bundle ID
          example: bun_a23e148584d0463482c961b7f62f824c
          schema:
            type: string
      responses:
        '201':
          description: Bundle successfully deleted
        '401': *ref_2
        '500': *ref_3
      tags: *ref_4
  /api/v1/customers:
    get:
      operationId: getCustomers
      summary: get all customers
      description: Retrieve all customers.
      parameters:
        - &ref_5
          name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - &ref_6
          name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information about all customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponseDto'
        '401': &ref_7
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500': &ref_8
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags: &ref_9
        - customers
  /api/v1/customers/{customerId}:
    get:
      operationId: getCustomer
      summary: get customer
      description: Retrieve a customer.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      responses:
        '200':
          description: information about your customer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/create:
    post:
      operationId: createCustomer
      summary: create customer
      description: >-
        Create a new customer. Call this when a new customer signs up for your
        API.


        You can this API in the `LIVE` or `TEST` environment and the outcome
        will be the same. Customers exist across environments. Handling of
        subsequent customer requests in a given environment are governed by the
        environment-specific keys (`LIVE` or `TEST`) they use to authenticate.


        Note that clients can also be created manually from within the Customers
        tab of your Kable dashboard.
      parameters:
        - *ref_5
        - *ref_6
        - name: stripe
          required: false
          in: query
          description: >-
            When true, Kable will also create and attach a Stripe customer.


            If your account is not connected to Stripe, the request will fail.
            If you provide a `stripeCustomerId` in the request body, this query
            parameter will be ignored.
          example: true
          schema:
            type: boolean
        - name: keys
          required: false
          in: query
          description: >-
            When true, Kable will create API keys for this customer. (This is
            only necessary if you use Kable for authentication.)
          example: true
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerRequestDto'
      responses:
        '201':
          description: New customer successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseWithKeysDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/update:
    post:
      operationId: updateCustomer
      summary: update customer
      description: >-
        Update a customer. Call this to programmatically update information
        about an existing customer.


        Note that clients can also be updated manually from within the Customers
        tab of your Kable dashboard.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequestDto'
      responses:
        '201':
          description: Customer successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/cancel:
    post:
      operationId: cancelCustomer
      summary: cancel a customer
      description: >-
        Cancelling a customer will update its status to `CANCELLED` and
        terminate all future billing.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      responses:
        '201':
          description: Customer successfully cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/delete:
    post:
      operationId: deleteCustomer
      summary: delete customer
      description: >-
        Deleting a customer will erase all record of the customer identity in
        Kable. This action is irreversible, and should only be used for the
        purposes of GDPR / CCPA.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      responses:
        '201':
          description: Customer successfully deleted
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/plans/add:
    post:
      operationId: createCustomerPlan
      summary: add customer plan(s)
      description: >-
        Add a plan(s) to a customer.


        Note that customer plans can also be added and removed manually from
        within the Customers tab of your Kable dashboard.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerPlansRequestDto'
      responses:
        '201':
          description: Customer plan successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/plans/remove:
    post:
      operationId: removeCustomerPlan
      summary: remove customer plan(s)
      description: >-
        Remove a plan(s) from a customer.


        Note that customer plans can also be added and removed manually from
        within the Customers tab of your Kable dashboard.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCustomerPlansRequestDto'
      responses:
        '201':
          description: Customer plan successfully removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/bundles/add:
    post:
      operationId: createCustomerBundle
      summary: add customer bundle
      description: >-
        Add a bundle to a customer.


        Note that customer bundles can also be added and removed manually from
        within the Customers tab of your Kable dashboard.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerBundleRequestDto'
      responses:
        '201':
          description: Customer bundle successfully added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/bundles/remove:
    post:
      operationId: removeCustomerBundle
      summary: remove customer bundle
      description: >-
        Remove a bundle to a customer.


        Note that customer bundles can also be added and removed manually from
        within the Customers tab of your Kable dashboard.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoveCustomerBundleRequestDto'
      responses:
        '201':
          description: Customer bundle successfully removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/payment_methods/add:
    post:
      operationId: createCustomerPaymentMethod
      summary: add customer payment method
      description: >-
        Collect a payment method / credit card for a customer.


        Calling this method creates a short-lived [Stripe Checkout
        Session](https://stripe.com/payments/checkout) to allow your customers
        to enter payment method details. This API will return a Stripe URL to
        which you should redirect your customers to securely add their credit
        card information. Upon completion, Stripe will redirect back to the
        provided URLs.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomerPaymentMethodRequestDto'
      responses:
        '201':
          description: >-
            Stripe Checkout Session successfully created to collect customer
            payment method
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCustomerPaymentMethodResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/credits/balance:
    get:
      operationId: getCustomerCreditBalance
      summary: get customer credit balance
      description: Get a customer's available credit balance.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      responses:
        '201':
          description: Customer credit grant balance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditBalanceResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/customers/{customerId}/credits/create:
    post:
      operationId: createCustomerCreditGrant
      summary: create customer credit grant
      description: Add a credit grant to a customer.
      parameters:
        - *ref_5
        - *ref_6
        - name: customerId
          required: true
          in: path
          description: The customer ID
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCreditGrantRequestDto'
      responses:
        '201':
          description: Credit grant successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreditGrantResponseDto'
        '401': *ref_7
        '500': *ref_8
      tags: *ref_9
  /api/v1/dimensions:
    get:
      operationId: getDimensions
      summary: get all dimensions
      description: Retrieve all dimensions.
      parameters:
        - &ref_10
          name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - &ref_11
          name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information about your dimensions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DimensionResponseDto'
        '401': &ref_12
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500': &ref_13
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags: &ref_14
        - dimensions
  /api/v1/dimensions/{dimensionId}:
    get:
      operationId: getDimension
      summary: get dimension
      description: Retrieve a dimension.
      parameters:
        - *ref_10
        - *ref_11
        - name: dimensionId
          required: true
          in: path
          description: The dimension ID
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
          schema:
            type: string
      responses:
        '200':
          description: Information about your dimension
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionResponseDto'
        '401': *ref_12
        '500': *ref_13
      tags: *ref_14
  /api/v1/dimensions/create:
    post:
      operationId: createDimension
      summary: create dimension
      description: Create a dimension.
      parameters:
        - *ref_10
        - *ref_11
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDimensionRequestDto'
      responses:
        '201':
          description: Dimension successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionResponseDto'
        '401': *ref_12
        '500': *ref_13
      tags: *ref_14
  /api/v1/dimensions/{dimensionId}/update:
    post:
      operationId: updateDimension
      summary: update dimension
      description: Update a dimension.
      parameters:
        - *ref_10
        - *ref_11
        - name: dimensionId
          required: true
          in: path
          description: The dimension ID
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDimensionRequestDto'
      responses:
        '201':
          description: Dimension successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DimensionResponseDto'
        '401': *ref_12
        '500': *ref_13
      tags: *ref_14
  /api/v1/dimensions/{dimensionId}/delete:
    post:
      operationId: deleteDimension
      summary: delete dimension
      description: |-
        Delete a dimension.

         You cannot delete a dimension if it is in use by a plan.
      parameters:
        - *ref_10
        - *ref_11
        - name: dimensionId
          required: true
          in: path
          description: The dimension ID
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
          schema:
            type: string
      responses:
        '201':
          description: Dimension successfully deleted
        '401': *ref_12
        '500': *ref_13
      tags: *ref_14
  /api/v1/plans:
    get:
      operationId: getPlans
      summary: get all plans
      description: Retrieve all plans.
      parameters:
        - &ref_15
          name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - &ref_16
          name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Information about all plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanResponseDto'
        '401': &ref_17
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500': &ref_18
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags: &ref_19
        - plans
  /api/v1/plans/{planId}:
    get:
      operationId: getPlan
      summary: get plan
      description: Retrieve a plan.
      parameters:
        - *ref_15
        - *ref_16
        - name: planId
          required: true
          in: path
          description: The plan ID
          example: pln_a23e148584d0463482c961b7f62f824c
          schema:
            type: string
      responses:
        '200':
          description: Information about your plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponseDto'
        '401': *ref_17
        '500': *ref_18
      tags: *ref_19
  /api/v1/plans/create:
    post:
      operationId: createPlan
      summary: create plan
      description: Create a plan.
      parameters:
        - *ref_15
        - *ref_16
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequestDto'
      responses:
        '201':
          description: Plan successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponseDto'
        '401': *ref_17
        '500': *ref_18
      tags: *ref_19
  /api/v1/plans/{planId}/update:
    post:
      operationId: updatePlan
      summary: update plan
      description: Update a plan.
      parameters:
        - *ref_15
        - *ref_16
        - name: planId
          required: true
          in: path
          description: The plan ID
          example: pln_a23e148584d0463482c961b7f62f824c
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlanRequestDto'
      responses:
        '201':
          description: Plan successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanResponseDto'
        '401': *ref_17
        '500': *ref_18
      tags: *ref_19
  /api/v1/plans/{planId}/delete:
    post:
      operationId: deletePlan
      summary: delete plan
      description: |-
        Delete a plan.

        You cannot delete a plan to which a customer is actively subscribed.
      parameters:
        - *ref_15
        - *ref_16
        - name: planId
          required: true
          in: path
          description: The plan ID
          example: pln_a23e148584d0463482c961b7f62f824c
          schema:
            type: string
      responses:
        '201':
          description: Plan successfully deleted
        '401': *ref_17
        '500': *ref_18
      tags: *ref_19
  /api/v1/invoices:
    get:
      operationId: getInvoices
      summary: get all invoices
      description: Retrieve all invoices.
      parameters:
        - &ref_20
          name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - &ref_21
          name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
        - name: customerId
          required: false
          in: query
          description: A Kable-defined identifier for the customer.
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
          schema:
            type: string
        - name: clientId
          required: false
          in: query
          description: A unique identifier for the customer, defined by you.
          example: yourcompanyuser_1234567890
          schema:
            type: string
      responses:
        '200':
          description: Information about all invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InvoiceResponseDto'
        '401': &ref_22
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500': &ref_23
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags: &ref_24
        - invoices
  /api/v1/invoices/{invoiceId}:
    get:
      operationId: getInvoice
      summary: get invoice
      description: Retrieve an invoice
      parameters:
        - *ref_20
        - *ref_21
        - name: invoiceId
          required: true
          in: path
          description: The invoice ID
          example: inv_346daaa242674b179ecc44f43b5b9db4
          schema:
            type: string
      responses:
        '200':
          description: Information about an invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponseDto'
        '401': *ref_22
        '500': *ref_23
      tags: *ref_24
  /api/v1/invoices/{invoiceId}/download:
    get:
      operationId: downloadInvoice
      summary: download invoice
      description: Download an invoice
      parameters:
        - *ref_20
        - *ref_21
        - name: invoiceId
          required: true
          in: path
          description: The invoice ID
          example: inv_346daaa242674b179ecc44f43b5b9db4
          schema:
            type: string
        - name: format
          required: true
          in: query
          description: The downloaded file format
          example: pdf
          schema:
            enum:
              - pdf
              - csv
            type: string
      responses:
        '200':
          description: Invoice successfully downloaded
        '401': *ref_22
        '500': *ref_23
      tags: *ref_24
  /api/v1/tokens/create:
    post:
      operationId: createToken
      summary: create token
      description: >-
        Generate a new access token for embedding Kable dashboards within your
        developer portal.
      parameters:
        - name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenDto'
      responses:
        '200':
          description: Token successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardTokenResponseDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags:
        - tokens
  /api/v1/usage/get:
    post:
      operationId: getUsage
      summary: get usage metric
      description: Retrieve a usage metric for a given dimension from Kable.
      parameters:
        - name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageMetricRequestDto'
      responses:
        '201':
          description: Usage metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageMetricResponseDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags:
        - usage
  /api/v1/authenticate:
    post:
      operationId: doAuthentication
      summary: authenticate API request
      description: >-
        Learn more about Kable as an Authentication Provider in the
        [documentation](https://docs.kable.io/docs/kable-as-an-authentication-provider).
      parameters:
        - name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - name: X-Client-Id
          in: header
          description: The client ID of the customer to authenticate.
          required: true
          schema:
            type: string
        - name: X-Api-Key
          in: header
          description: An API key to authenticate for the provided X-Client-Id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
        '401':
          description: Unauthorized
      tags:
        - authentication
  /api/v1/events/create:
    post:
      operationId: createEvent
      summary: record events
      description: >-
        Record information about something that happened in your API.


        Kable uses events to perform metering and usage-based billing
        calculations.
      parameters:
        - name: Kable-Client-Id
          in: header
          description: Your Kable client ID, found in the dashboard of your Kable account.
          required: true
          schema:
            type: string
        - name: Kable-Client-Secret
          in: header
          description: Your `LIVE` or `TEST` secret key.
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: An event or list of usage events to record.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EventDto'
      responses:
        '200':
          description: Events successfully recorded
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage401'
        '500':
          description: Something went wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage500'
      tags:
        - events
info:
  title: Kable API
  description: >+
    The Kable API allows developers to manage customers, plans, and usage data
    for their API.


    ## API Host and Environments


    Kable is accessible in Live and Test environments for authentication and
    metering of client API requests. You will have separate API keys to access
    each environment.


    You should only use Kable's Live environment for your own production data.
    All other configured environments should use Kable's Test environment.


    ## API Protocols and Headers


    All requests to the Kable API are made over HTTPS TLS v1.2+ to ensure
    security. Calls made over HTTP will fail. Any requests without proper
    authentication will also fail.


    The Kable API uses standard JSON for requests and responses. Be sure to set
    both the `Content-Type` and `Accept` headers on each request to
    `application/json`.


    Each Kable API response includes a `requestId` as the `X-REQUEST-ID`
    response header. The `requestId` is included on most responses regardless
    whether the API request succeeded or failed. You can use this `requestId` to
    help with debugging or when contacting support regarding a specific API
    call.


    ## API Versioning


    All Kable endpoints are versioned. After the host, each API can be found at
    `/api/vX/...` where X is the API version.


    We strive to ensure that changes to the Kable API are backward compatible.
    Sometimes, though, we must break from older design paradigms to make the
    product better. When this happens, a new version of the API is released.


    The current version of the Kable API is `v1`.

  version: 1.0.0
  contact:
    name: Kable
    url: https://kable.io
    email: contact@kable.io
tags: []
servers:
  - url: https://live.kable.io
    description: Kable Live
  - url: https://test.kable.io
    description: Kable Test
components:
  schemas:
    ErrorMessage401:
      type: object
      properties:
        message:
          type: string
          description: Human-readable error message
          example: Unauthorized
      required:
        - message
    ErrorMessage500:
      type: object
      properties:
        message:
          type: string
          description: Human-readable error message
          example: Something went wrong
      required:
        - message
    PlanPriceResponseDto:
      type: object
      properties:
        currency:
          type: string
        tiers:
          type: array
          items:
            type: string
      required:
        - currency
        - tiers
    PlanResponseDto:
      type: object
      properties:
        planId:
          type: string
          description: A Kable-defined identifier for the plan.
          example: pln_a23e148584d0463482c961b7f62f824c
        name:
          type: string
          description: >-
            A human-readable name for the plan, visible on dashboards, invoices,
            and reports.
          example: Requests Usage Plan
        externalId:
          type: string
          description: An identifier for the plan as defined by your API.
          example: yourcompany_plan123
        description:
          type: string
          description: >-
            A human-readable description for the plan, visible on dashboards,
            invoices, and reports.
          example: A usage plan based on the number of API requests
        nickname:
          type: string
          description: >-
            An additional identifier for the plan, defined by you, that is *not*
            visible to customers. If you have different *Monthly Active Users
            Plan*s for different cohorts of customers, this is a useful place to
            differentiate those.
          example: requests_usage_v1
        type:
          type: string
          description: The type of plan.
          enum:
            - USAGE
            - SUBCRIPTION
          example: USAGE
        dimensionId:
          type: string
          description: >-
            An identifier of the dimension along which usage is aggregated in
            this plan, relevant only for usage plans.
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
        aggregation:
          type: string
          description: >-
            The aggregation along which usage metrics are calculated in this
            plan, relevant only for usage plans.
          example: COUNT
        interval:
          type: string
          description: The billing interval for the plan.
          example: MONTH
          enum:
            - MONTH
        metadata:
          type: object
          description: >-
            Arbitrary key-value pairs to attach to the object that can be useful
            for controlling functionality inside your API.
          example:
            foo: bar
        price:
          description: The monthly price of the plan.
          allOf:
            - $ref: '#/components/schemas/PlanPriceResponseDto'
        created:
          format: date-time
          type: string
          description: Date at which entity was first created
          example: '2022-03-01T00:00:00.000Z'
        modified:
          format: date-time
          type: string
          description: Date at which entity was last modified
          example: '2022-03-01T00:00:00.000Z'
      required:
        - planId
        - name
        - type
        - dimensionId
        - interval
        - price
        - created
        - modified
    BundleResponseDto:
      type: object
      properties:
        bundleId:
          type: string
          description: A Kable-defined identifier for the bundle.
          example: bun_a23e148584d0463482c961b7f62f824c
        name:
          type: string
          description: >-
            A human-readable name for the bundle, visible on dashboards,
            invoices, and reports.
          example: Professional Package
        externalId:
          type: string
          description: An identifier for the bundle as defined by your API.
          example: yourcompany_bun123
        description:
          type: string
          description: >-
            A human-readable description for the bundle, visible on dashboards,
            invoices, and reports.
          example: The perfect package for scaling businesses
        nickname:
          type: string
          description: >-
            An additional identifier for the bundle, defined by you, that is
            *not* visible to customers. If you have different *Monthly Active
            Users Bundle*s for different cohorts of customers, this is a useful
            place to differentiate those.
          example: professional_2022
        currency:
          type: string
          description: Three-letter ISO currency code
          example: USD
          enum:
            - USD
            - CAD
            - MXN
            - EUR
            - GBP
            - JPY
            - INR
            - CNY
            - AUD
            - NZD
            - AED
        plans:
          description: The plans included in this bundle.
          type: array
          items:
            $ref: '#/components/schemas/PlanResponseDto'
        metadata:
          type: object
          description: >-
            Arbitrary key-value pairs to attach to the object that can be useful
            for controlling functionality inside your API.
          example:
            foo: bar
        created:
          format: date-time
          type: string
          description: Date at which entity was first created
          example: '2022-03-01T00:00:00.000Z'
        modified:
          format: date-time
          type: string
          description: Date at which entity was last modified
          example: '2022-03-01T00:00:00.000Z'
      required:
        - bundleId
        - name
        - currency
        - created
        - modified
    CreateBundleRequestDto:
      type: object
      properties:
        bundleId:
          type: string
        name:
          type: string
        externalId:
          type: string
        description:
          type: string
        nickname:
          type: string
        planIds:
          type: array
          items:
            type: string
        currency:
          type: string
        costPerCredit:
          type: number
        metadata:
          type: object
      required:
        - bundleId
        - name
    UpdateBundleRequestDto:
      type: object
      properties:
        bundleId:
          type: string
        name:
          type: string
        externalId:
          type: string
        description:
          type: string
        nickname:
          type: string
        planIds:
          type: array
          items:
            type: string
        currency:
          type: string
        costPerCredit:
          type: number
        metadata:
          type: object
    BillingContactRequestDto:
      type: object
      properties:
        firstName:
          type: string
          description: Contact's first name.
          example: Bruce
        lastName:
          type: string
          description: Contact's last name.
          example: Wayne
        email:
          type: string
          description: Contact's email address.
          example: bruce@wayneenterprises.com
        phone:
          type: string
          description: Contact's phone number.
          example: 555-555-5555
        addressLine1:
          type: string
          description: First line of contact's mailing address.
          example: 1007 Mountain Drive
        addressLine2:
          type: string
          description: Second line of contact's mailing address.
          example: Apt 1
        city:
          type: string
          description: City of contact's mailing address.
          example: Gotham
        state:
          type: string
          description: State of contact's mailing address.
          example: NY
        postalCode:
          type: string
          description: Postal code of contact's mailing address.
          example: '10001'
        country:
          type: string
          description: Country of contact's mailing address.
          example: US
    CustomerResponseDto:
      type: object
      properties:
        kableClientId:
          type: string
          description: Your Kable client ID, found in the dashboard of your Kable account
          example: kci_3c90e9ac92c64f31ae8ed84d21e18740
        customerId:
          type: string
          description: A Kable-defined identifier for the customer.
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
        clientId:
          type: string
          description: A unique identifier for the customer, defined by you.
          example: yourcompanyuser_1234567890
        companyName:
          type: string
          description: The name of the customer.
          example: Awesome Corp
        currency:
          type: string
          description: Three-letter ISO currency code
          example: USD
          enum: &ref_25
            - USD
            - CAD
            - MXN
            - EUR
            - GBP
            - JPY
            - INR
            - CNY
            - AUD
            - NZD
            - AED
        status:
          type: string
          description: The status of the customer.
          example: ACTIVE
          enum: &ref_26
            - ACTIVE
            - CANCELLED
        nextInvoiceDate:
          format: date-time
          type: string
          description: The date at which the customer's next invoice will occur.
          example: '2022-05-12T00:00:00.000Z'
        billingContact:
          description: >-
            A point of contact for invoices and other billing-related
            communications.
          allOf:
            - $ref: '#/components/schemas/BillingContactRequestDto'
        plans:
          description: The customer's plans.
          example: &ref_27[]
          type: array
          items:
            type: string
        bundles:
          description: The customer's bundles.
          example: &ref_28[]
          type: array
          items:
            type: string
        created:
          format: date-time
          type: string
          description: Date at which entity was first created
          example: '2022-03-01T00:00:00.000Z'
        modified:
          format: date-time
          type: string
          description: Date at which entity was last modified
          example: '2022-03-01T00:00:00.000Z'
      required:
        - kableClientId
        - customerId
        - clientId
        - companyName
        - currency
        - status
        - plans
        - bundles
        - created
        - modified
    CreateCustomerRequestDto:
      type: object
      properties:
        clientId:
          type: string
          description: >-
            A unique identifier for the customer, defined by you. This usually
            corresponds to your own internal unique identifier for customers,
            and is the identifier by which Kable attributes customer usage.
          example: yourcompanyuser_1234567890
        companyName:
          type: string
          description: >-
            The name of the customer, visible on dashboards, invoices, and
            reports.
          example: Awesome Corp
        currency:
          type: string
          description: Three-letter ISO currency code
          example: USD
          enum:
            - USD
            - CAD
            - MXN
            - EUR
            - GBP
            - JPY
            - INR
            - CNY
            - AUD
            - NZD
            - AED
        stripeCustomerId:
          type: string
          description: >-
            The customer's Stripe `customer_id`, if one already exists, for
            automatic invoice processing through Stripe.
        planIds:
          description: A collection of plans to which to subscribe the customer.
          example:
            - pln_a23e148584d0463482c961b7f62f824c
          type: array
          items:
            type: string
        bundleIds:
          description: A collection of bundles to which to subscribe the customer.
          example:
            - bun_a23e148584d0463482c961b7f62f824c
          type: array
          items:
            type: string
        billingContact:
          description: >-
            A point of contact for invoices and other billing-related
            communications.
          allOf:
            - $ref: '#/components/schemas/BillingContactRequestDto'
      required:
        - clientId
        - companyName
        - currency
    KeyResponseDto:
      type: object
      properties:
        clientId:
          type: string
          description: A unique identifier for the customer, defined by you.
          example: yourcompanyuser_1234567890
        key:
          type: string
          description: The API key value
          example: sk_test_.a924be71...
        revokedAt:
          format: date-time
          type: string
          description: The time at which the key was revoked
          example: '2022-05-10T00:00:00.000Z'
        created:
          format: date-time
          type: string
          description: Date at which entity was first created
          example: '2022-03-01T00:00:00.000Z'
      required:
        - clientId
        - key
        - created
    CustomerResponseWithKeysDto:
      type: object
      properties:
        kableClientId:
          type: string
          description: Your Kable client ID, found in the dashboard of your Kable account
          example: kci_3c90e9ac92c64f31ae8ed84d21e18740
        customerId:
          type: string
          description: A Kable-defined identifier for the customer.
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
        clientId:
          type: string
          description: A unique identifier for the customer, defined by you.
          example: yourcompanyuser_1234567890
        companyName:
          type: string
          description: The name of the customer.
          example: Awesome Corp
        currency:
          type: string
          description: Three-letter ISO currency code
          example: USD
          enum: *ref_25
        status:
          type: string
          description: The status of the customer.
          example: ACTIVE
          enum: *ref_26
        nextInvoiceDate:
          format: date-time
          type: string
          description: The date at which the customer's next invoice will occur.
          example: '2022-05-12T00:00:00.000Z'
        billingContact:
          description: >-
            A point of contact for invoices and other billing-related
            communications.
          allOf:
            - $ref: '#/components/schemas/BillingContactRequestDto'
        plans:
          description: The customer's plans.
          example: *ref_27
          type: array
          items:
            type: string
        bundles:
          description: The customer's bundles.
          example: *ref_28
          type: array
          items:
            type: string
        created:
          format: date-time
          type: string
          description: Date at which entity was first created
          example: '2022-03-01T00:00:00.000Z'
        modified:
          format: date-time
          type: string
          description: Date at which entity was last modified
          example: '2022-03-01T00:00:00.000Z'
        keys:
          description: >-
            The customer's API keys (relevant only if you use Kable as an
            authentication provider)
          type: array
          items:
            $ref: '#/components/schemas/KeyResponseDto'
      required:
        - kableClientId
        - customerId
        - clientId
        - companyName
        - currency
        - status
        - plans
        - bundles
        - created
        - modified
    UpdateCustomerRequestDto:
      type: object
      properties:
        companyName:
          type: string
          description: >-
            The name of the customer, visible on dashboards, invoices, and
            reports.
          example: Awesome Corp
        currency:
          type: string
          description: The currency with which this customer pays for plans.
          example: USD
        stripeCustomerId:
          type: string
          description: >-
            The customer's Stripe `customer_id`, if any, for automatic invoice
            processing through Stripe.
          example: cus_a91565WBFwU30c
        billingContact:
          description: >-
            A point of contact for invoices and other billing-related
            communications.
          allOf:
            - $ref: '#/components/schemas/BillingContactRequestDto'
    CreateCustomerPlansRequestDto:
      type: object
      properties:
        planIds:
          description: A collection of plans to which to subscribe the customer.
          example:
            - pln_a23e148584d0463482c961b7f62f824c
          type: array
          items:
            type: string
    RemoveCustomerPlansRequestDto:
      type: object
      properties:
        planId:
          type: string
          description: The identifier for a single plan.
          example: pln_a23e148584d0463482c961b7f62f824c
        planIds:
          description: The identifiers for many plans.
          example:
            - pln_a23e148584d0463482c961b7f62f824c
            - pln_b177473b31d44c3b8a2a365618a3deca
          type: array
          items:
            type: string
    CreateCustomerBundleRequestDto:
      type: object
      properties:
        bundleId:
          type: string
          description: The identifier for the bundle.
          example: bun_a23e148584d0463482c961b7f62f824c
      required:
        - bundleId
    RemoveCustomerBundleRequestDto:
      type: object
      properties:
        bundleId:
          type: string
          description: Bundle ID to remove.
          example: bun_a23e148584d0463482c961b7f62f824c
      required:
        - bundleId
    AddCustomerPaymentMethodRequestDto:
      type: object
      properties:
        successUrl:
          type: string
          description: >-
            The url to which to redirect after successful payment method
            creation
          example: https://yourcompany.com/signup/complete?success=true
        cancelUrl:
          type: string
          description: The url to which to redirect after failed payment method creation
          example: https://yourcompany.com/signup/failure?success=false
      required:
        - successUrl
        - cancelUrl
    AddCustomerPaymentMethodResponseDto:
      type: object
      properties:
        url:
          type: string
          description: >-
            The Stripe checkout url to which to redirect customers to complete
            payment method creation
          example: https://checkout.stripe.com/pay/cs_test_c1PJzZEmw9vH1x978D...
      required:
        - url
    CreditBalanceResponseDto:
      type: object
      properties:
        available:
          type: number
          description: The customer's available credit grant balance
          example: 75
      required:
        - available
    CreateCreditGrantRequestDto:
      type: object
      properties:
        grantAmount:
          type: number
          description: The number of credits to create in the grant.
          example: 100
        chargeAmount:
          type: number
          description: >-
            An optional amount to charge the customer (in the customer's
            configured `currency`) before issuing a credit grant.


            When the `chargeAmount` field is supplied, Kable will attempt to
            charge the customer immediately through Stripe before issuing the
            grant. Therefore, when specifying a `chargeAmount`, the customer
            must have a Stripe integration defined and have a default payment
            card on-file.
          example: 199.99
        description:
          type: string
          description: >-
            A human-readable description that explains why the credit grant is
            being created.
          example: A top-up grant to buy more API credits.
        expiration:
          format: date-time
          type: string
          description: The expiration date of the credit grant.
          example: '2023-01-01T00:00:00.000Z'
      required:
        - grantAmount
    CreditGrantResponseDto:
      type: object
      properties:
        creditGrantId:
          type: string
          description: A Kable-defined identifier for the credit grant.
          example: crd_f55ad8df7b4b4890881595d3d8005c4f
        customerId:
          type: string
          description: The customer for whom the credit was granted.
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
        grantAmount:
          type: number
          description: The number of credits granted.
          example: 100
        balanceAmount:
          type: number
          description: The number of credits available.
          example: 100
        paidAmount:
          type: number
          description: The amount paid for the grant.
          example: 199.99
        currency:
          type: string
          description: Three-letter ISO currency code
          example: USD
          enum:
            - USD
            - CAD
            - MXN
            - EUR
            - GBP
            - JPY
            - INR
            - CNY
            - AUD
            - NZD
            - AED
        description:
          type: string
          description: >-
            A human-readable description that explains why the credit grant was
            created.
          example: A top-up grant to buy more API credits.
        expiration:
          format: date-time
          type: string
          description: The expiration date of the credit grant.
          example: '2023-01-01T00:00:00.000Z'
      required:
        - creditGrantId
        - customerId
        - grantAmount
        - balanceAmount
        - currency
    DimensionResponseDto:
      type: object
      properties:
        dimensionId:
          type: string
          description: A Kable-defined identifier for the dimension.
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
        key:
          type: string
          description: >-
            An identifier for the dimension defined by you. This key corresponds
            to the key in the JSON payload of a usage event, and can be passed
            into the `record` library method.
          example: userId
        name:
          type: string
          description: >-
            A human-readable name for the dimension, visible on dashboards,
            invoices, and reports.
          example: User
      required:
        - dimensionId
        - key
        - name
    CreateDimensionRequestDto:
      type: object
      properties:
        key:
          type: string
          description: >-
            The key by which Kable identifies the dimension in your usage
            events.
          example: userId
        name:
          type: string
          description: >-
            A human-readable name for the dimension which will be visible in
            dashboards and on invoices. Dimension names should be singular, not
            plural (ie "User," not "Users")
          example: User
      required:
        - key
        - name
    UpdateDimensionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: >-
            A human-readable name for the dimension which will be visible in
            dashboards and on invoices. Dimension names should be singular, not
            plural (ie "User," not "Users").
          example: User
      required:
        - name
    PlanPriceRequestDto:
      type: object
      properties:
        currency:
          type: string
          description: Three-letter currency code.
          enum:
            - USD
            - CAD
            - MXN
            - EUR
            - GBP
            - JPY
            - INR
            - CNY
            - AUD
            - NZD
          example: USD
        tiers:
          description: >-
            Price tiers that define price for usage-based plans. Subscription
            plans will always have prices with a single tier.
          type: array
          items:
            type: string
      required:
        - currency
        - tiers
    CreatePlanRequestDto:
      type: object
      properties:
        planId:
          type: string
        name:
          type: string
          description: >-
            A human-readable name for the plan, visible on dashboards, invoices,
            and reports.
          example: Requests Usage Plan
        externalId:
          type: string
          description: An identifier for the plan as defined by your API.
          example: yourcompany_plan123
        description:
          type: string
          description: >-
            A human-readable description for the plan, visible on dashboards,
            invoices, and reports.
          example: A usage plan based on the number of API requests
        nickname:
          type: string
          description: >-
            An additional identifier for the plan, defined by you, that is *not*
            visible to customers. If you have different *Monthly Active Users
            Plan*s for different cohorts of customers, this is a useful place to
            differentiate those.
          example: requests_usage_v1
        type:
          type: string
          description: The type of plan.
          enum: &ref_29
            - USAGE
            - SUBSCRIPTION
          example: USAGE
        dimensionId:
          type: string
          description: >-
            An identifier of the dimension along which usage is aggregated in
            this plan.
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
        aggregation:
          type: string
          description: >-
            The aggregation along which usage metrics are calculated in this
            plan, relevant only for usage plans.
          example: COUNT
        interval:
          type: string
          description: The billing interval for the plan.
          enum: &ref_30
            - MONTH
          example: MONTH
        metadata:
          type: object
          description: >-
            Arbitrary key-value pairs to attach to the object that can be useful
            for controlling functionality inside your API.
          example: &ref_31
            foo: bar
        price:
          description: The monthly price of the plan.
          allOf:
            - $ref: '#/components/schemas/PlanPriceRequestDto'
      required:
        - planId
        - name
        - type
        - price
    UpdatePlanRequestDto:
      type: object
      properties:
        planId:
          type: string
        name:
          type: string
          description: >-
            A human-readable name for the plan, visible on dashboards, invoices,
            and reports.
          example: Requests Usage Plan
        externalId:
          type: string
          description: An identifier for the plan as defined by your API.
          example: yourcompany_plan123
        description:
          type: string
          description: >-
            A human-readable description for the plan, visible on dashboards,
            invoices, and reports.
          example: A usage plan based on the number of API requests
        nickname:
          type: string
          description: >-
            An additional identifier for the plan, defined by you, that is *not*
            visible to customers. If you have different *Monthly Active Users
            Plan*s for different cohorts of customers, this is a useful place to
            differentiate those.
          example: requests_usage_v1
        type:
          type: string
          description: The type of plan.
          enum: *ref_29
          example: USAGE
        dimensionId:
          type: string
          description: >-
            An identifier of the dimension along which usage is aggregated in
            this plan.
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
        aggregation:
          type: string
          description: >-
            The aggregation along which usage metrics are calculated in this
            plan, relevant only for usage plans.
          example: COUNT
        interval:
          type: string
          description: The billing interval for the plan.
          enum: *ref_30
          example: MONTH
        metadata:
          type: object
          description: >-
            Arbitrary key-value pairs to attach to the object that can be useful
            for controlling functionality inside your API.
          example: *ref_31
        price:
          description: The monthly price of the plan.
          allOf:
            - $ref: '#/components/schemas/PlanPriceRequestDto'
    InvoiceCustomerResponseDto:
      type: object
      properties:
        customerId:
          type: string
          description: A Kable-defined identifier for the customer.
          example: cus_8276e1ac8ed84d21c64f31ae0082fe
        clientId:
          type: string
          description: A unique identifier for the customer, defined by you.
          example: yourcompanyuser_1234567890
        companyName:
          type: string
          description: The name of the customer.
          example: Awesome Corp
      required:
        - customerId
        - clientId
        - companyName
    InvoicePriceResponseDto:
      type: object
      properties:
        currency:
          type: string
          description: Three-letter ISO currency code
          example: USD
          enum:
            - USD
            - CAD
            - MXN
            - EUR
            - GBP
            - JPY
            - INR
            - CNY
            - AUD
            - NZD
            - AED
        amount:
          type: number
          description: The total price amount.
          example: 499.99
      required:
        - currency
        - amount
    InvoiceUsageResponseDto:
      type: object
      properties:
        aggregation:
          type: string
          description: The aggregation type
          example: COUNT
          enum:
            - COUNT
            - COUNT_DISTINCT
            - SUM
            - MINIMUM
            - MAXIMUM
        dimensionId:
          type: string
          description: >-
            The identifier of the dimension along which usage is aggregated in
            this line item.
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
        total:
          type: number
          description: The total usage consumption amount.
          example: 35810
      required:
        - aggregation
        - dimensionId
        - total
    InvoiceLineItemTierResponseDto:
      type: object
      properties:
        usage:
          description: The usage consumption for the line item.
          allOf:
            - $ref: '#/components/schemas/InvoiceUsageResponseDto'
        price:
          description: The price of the line item.
          allOf:
            - $ref: '#/components/schemas/InvoicePriceResponseDto'
      required:
        - price
    InvoiceLineItemResponseDto:
      type: object
      properties:
        planId:
          type: string
          description: The identifier of the plan to which this line item corresponds.
          example: pln_a23e148584d0463482c961b7f62f824c
        price:
          description: The price of the line item.
          allOf:
            - $ref: '#/components/schemas/InvoicePriceResponseDto'
        usage:
          description: The usage consumption for the line item.
          allOf:
            - $ref: '#/components/schemas/InvoiceUsageResponseDto'
        items:
          description: Sub-line items associated with this line item.
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItemTierResponseDto'
        startDate:
          format: date-time
          type: string
          description: Coverage period start date for the line item.
        endDate:
          format: date-time
          type: string
          description: Coverage period end date for the line item.
      required:
        - price
        - items
        - startDate
        - endDate
    InvoiceResponseDto:
      type: object
      properties:
        kableClientId:
          type: string
          description: Your Kable client ID, found in the dashboard of your Kable account
          example: kci_3c90e9ac92c64f31ae8ed84d21e18740
        invoiceId:
          type: string
          description: A Kable-defined identifier for the customer.
          example: inv_346daaa242674b179ecc44f43b5b9db4
        customer:
          description: The customer for whom the invoice was generated.
          allOf:
            - $ref: '#/components/schemas/InvoiceCustomerResponseDto'
        postDate:
          format: date-time
          type: string
          description: The date the invoice was posted.
          example: '2022-03-01T00:00:00.000Z'
        status:
          type: string
          description: The status of the invoice.
          example: COMPLETE
          enum:
            - PENDING
            - PROCESSING
            - COMPLETE
            - FAILED
        price:
          description: The total price of the invoice.
          allOf:
            - $ref: '#/components/schemas/InvoicePriceResponseDto'
        items:
          description: The invoice line items.
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItemResponseDto'
        created:
          format: date-time
          type: string
          description: Date at which entity was first created
          example: '2022-03-01T00:00:00.000Z'
        modified:
          format: date-time
          type: string
          description: Date at which entity was last modified
          example: '2022-03-01T00:00:00.000Z'
      required:
        - kableClientId
        - invoiceId
        - customer
        - postDate
        - status
        - price
        - items
        - created
        - modified
    CreateTokenDto:
      type: object
      properties:
        clientId:
          type: string
          example: yourcompanyuser_1234567890
      required:
        - clientId
    DashboardTokenResponseDto:
      type: object
      properties:
        token:
          type: string
          description: The access token value
          example: 30e8c05f9add4ebeaab3ab2f42bdde31
      required:
        - token
    UsageMetricRequestDto:
      type: object
      properties:
        aggregation:
          type: string
          description: The aggregation by which to evaluate the metric.
          example: COUNT
          enum:
            - COUNT
            - COUNT_DISTINCT
            - SUM
            - MAXIMUM
            - MINIMUM
        dimensionId:
          type: string
          description: >-
            The dimension to measure.


            Note that one of either `dimensionId` or `dimensionKey` must be
            provided.
          example: dim_c5f32b8cd8934356b5167a3b2c6c6314
        dimensionKey:
          type: string
          description: >-
            The dimension to measure.


            Note that one of either `dimensionId` or `dimensionKey` must be
            provided.
          example: userId
        startDate:
          format: date-time
          type: string
          description: >-
            Start of the period over which to query. Timestamps must be
            formatted as RFC 3339 strings like `2022-01-09T09:32:01Z`.
          example: '2022-03-01T00:00:00Z'
        endDate:
          format: date-time
          type: string
          description: >-
            End of the period over which to query. Timestamps must be formatted
            as RFC 3339 strings like `2022-01-09T09:32:01Z`.
          example: '2022-04-01T00:00:00Z'
        interval:
          type: string
          description: Timeseries unit duration over which to return intervals.
          example: DAY
          enum:
            - MINUTE
            - HOUR
            - DAY
            - WEEK
            - YEAR
        clientId:
          type: string
          description: >-
            When provided, query will consider only this customer. When `null`,
            query will consider all of your customers.
          example: yourcompanyuser_1234567890
      required:
        - aggregation
        - startDate
        - endDate
        - interval
    UsageMetricIntervalResponseDto:
      type: object
      properties:
        intervalStart:
          format: date-time
          type: string
          description: Start of the interval over which usage was evaluated.
          example: '2022-03-01T00:00:00Z'
        intervalEnd:
          format: date-time
          type: string
          description: End of the interval over which usage was evaluated.
          example: '2022-03-02T00:00:00Z'
        dimension:
          description: The dimension for which usage was evaluated.
          allOf:
            - $ref: '#/components/schemas/DimensionResponseDto'
        clientId:
          type: string
          description: The customer for which usage was evaluated.
          example: yourcompanyuser_1234567890
        total:
          type: number
          description: The usage metric value for the given dimension and interval.
          example: 2397
      required:
        - intervalStart
        - intervalEnd
        - dimension
        - total
    UsageMetricResponseDto:
      type: object
      properties:
        startDate:
          format: date-time
          type: string
          description: Start of the period over which usage was evaluated.
          example: '2022-03-01T00:00:00Z'
        endDate:
          format: date-time
          type: string
          description: End of the period over which usage was evaluated.
          example: '2022-04-01T00:00:00Z'
        dimension:
          description: The dimension for which usage was evaluated.
          allOf:
            - $ref: '#/components/schemas/DimensionResponseDto'
        clientId:
          type: string
          description: The customer for which usage was evaluated.
          example: yourcompanyuser_1234567890
        total:
          type: number
          description: The usage metric value for the given dimension and interval.
          example: 841395
        intervals:
          description: Time-series intervals over which usage was evaluated.
          type: array
          items:
            $ref: '#/components/schemas/UsageMetricIntervalResponseDto'
      required:
        - startDate
        - endDate
        - dimension
        - total
        - intervals
    EventDto:
      type: object
      properties:
        clientId:
          type: string
          description: A unique identifier for the customer, defined by you.
          example: yourcompanyuser_1234567890
        timestamp:
          format: date-time
          type: string
          description: >-
            When the event occurred. Timestamps must be formatted as RFC-3339
            strings like `2022-01-09T09:32:01Z`.
          example: '2022-01-09T09:32:01Z'
        data:
          type: object
          description: >-
            `data` is a JSON-formatted object containing key-value pairs of
            information to be tracked by Kable. The keys provided in the `data`
            JSON correspond to the Dimensions you've defined on Kable.


            When using a Kable library, you must **always** include a `clientId`
            in the `record` payload so that Kable can accurately attribute
            events to your customers.
          example:
            userId: xyz123
            messageId: msg_824ae20a
            countOfSomethingInteresting: 10
            accountBalance: 399.99
        transactionId:
          type: string
          description: >-
            A unique identifier for the event, used as an idempotency key for
            event deduplication.
          example: 4e7c0f73-ef84-490c-8a47-4c7a3bec2df0
      required:
        - clientId
        - timestamp
externalDocs:
  description: Kable Documentation
  url: https://docs.kable.io